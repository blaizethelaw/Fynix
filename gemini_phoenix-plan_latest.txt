<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>The Phoenix Plan</title>
    
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Libraries: p5.js for background, Chart.js for charts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- React and Babel for running React in the browser -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
        :root {
            --phoenix-orange: #f97316;
            --phoenix-red: #ea580c;
            --phoenix-yellow: #f59e0b;
            --phoenix-dark: #111827;
            --glass-white: rgba(255, 255, 255, 0.05);
            --glass-border: rgba(255, 255, 255, 0.2);
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--phoenix-dark);
        }
        #bgCanvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
            opacity: 0.2;
        }
        /* Custom scrollbar */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1f2937; }
        ::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #6b7280; }
        
        /* Modal and Wizard styles */
        .modal-overlay {
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(0,0,0,0.8);
            display: flex; align-items: center; justify-content: center;
            z-index: 50; animation: fadeIn 0.3s ease;
        }
        .modal-content {
            background: linear-gradient(135deg, #1f2937, #111827);
            padding: 2rem; border-radius: 1rem; max-width: 600px;
            width: 90%; border: 1px solid var(--glass-border);
            max-height: 90vh; overflow-y: auto;
        }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .checklist-item {
            transition: all 0.3s ease;
        }
        .checklist-item-done {
            color: #6b7280; /* text-gray-500 */
            text-decoration: line-through;
        }
    </style>
</head>
<body class="text-white antialiased">
    <div id="root"></div>

    <script type="text/babel">
        // --- DATA ---
        const guidesData = [
            {
                id: 'part1',
                title: 'Part I: Financial Triage',
                sections: [
                    { 
                        id: 'sec1-1', 
                        title: 'The Garnishment Gauntlet', 
                        takeaway: 'Reframe a garnishment as a fixed, predictable expense, not a loss.', 
                        content: `A wage garnishment is a legal order, typically from a court, directing an employer to withhold a portion of an employee's earnings for the payment of a debt. Child support orders are one of the most common and potent forms of garnishment, and they are given legal priority over other types of debts, such as creditor garnishments for credit cards or personal loans. This means that if multiple garnishments exist, the child support order will be paid first. The deduction is involuntary; an employee cannot opt out or request a pause from their employer, who is legally obligated to comply with the court order.\n\nA crucial element in this process is the calculation of "disposable earnings." This is not your total gross pay. Disposable earnings are the amount left after legally required deductions—such as federal, state, and local taxes, Social Security, and Medicare—have been made. Voluntary deductions like health insurance premiums or retirement contributions are generally not subtracted from gross earnings when calculating the garnishable amount.\n\nFederal law, specifically the Consumer Credit Protection Act (CCPA), establishes maximum limits on how much of your disposable earnings can be garnished. For ordinary debts, the limit is the lesser of 25% of your disposable earnings or the amount by which your earnings exceed 30 times the federal minimum wage. However, for child support, these limits are substantially higher. The CCPA allows for up to 50% of disposable earnings to be garnished if you are supporting another spouse or child, and up to 60% if you are not. An additional 5% may be garnished if support payments are more than 12 weeks in arrears. It is vital to note that if your state's laws are more favorable to you—meaning they allow a smaller percentage to be garnished—the state law takes precedence.`,
                        resources: [
                            { type: 'link', title: 'FTC Guide to Wage Garnishment', url: 'https://consumer.ftc.gov/articles/wage-garnishment' },
                            { type: 'youtube', title: 'How to Stop Wage Garnishment - Legal Aid', url: 'https://www.youtube.com/watch?v=p82a5-E_w-A' }
                        ]
                    },
                    { 
                        id: 'sec1-2', 
                        title: 'The Turnaround Budget', 
                        takeaway: 'Use Zero-Based Budgeting with your most conservative income estimate.', 
                        content: `With a clear understanding of your post-garnishment income, the next step is to implement a rigorous budgeting system. The chosen method must be adaptable to different income structures—salaried, hourly, or contract-based—and provide maximum control over every dollar.\n\nTo implement a Zero-Based Budget, follow these steps each month:\n1. Start with your calculated baseline income (post-garnishment, after-tax).\n2. List and subtract your "Four Walls"—the absolute essentials: Food, Utilities, Shelter, and Transportation.\n3. List and subtract all other fixed bills and minimum debt payments.\n4. Allocate the remaining money to variable spending categories (e.g., household goods, personal care).\n5. Assign any final remaining dollars to your primary financial goal (e.g., building your emergency fund). The final number must be zero.\n\nFor those with irregular income, a standard ZBB must be paired with a "Surplus Budget" strategy. This means living permanently on the conservative baseline budget. Any income earned in a month *above* that baseline is considered surplus and is not for general spending. This surplus is immediately deployed according to a strict, predetermined plan: first, to build the starter emergency fund; second, to make a large, targeted payment to high-interest debt; and third, to build a separate "income buffer" savings account to smooth out future months that may fall below the baseline.`,
                        resources: [
                            { type: 'link', title: 'NerdWallet: How to Make a Zero-Based Budget', url: 'https://www.nerdwallet.com/article/finance/zero-based-budgeting-explained' },
                            { type: 'youtube', title: 'Zero-Based Budgeting Explained by The Plain Bagel', url: 'https://www.youtube.com/watch?v=1h_2gIg2_T4' }
                        ]
                    },
                    { 
                        id: 'sec1-3', 
                        title: 'Cash Flow Command', 
                        takeaway: 'Align your bill due dates to fall just after your paydays.', 
                        content: `A budget is a static plan; cash flow management is the dynamic process of executing that plan in real-time. It involves tracking the movement of money in and out of your accounts to ensure that you have enough cash on hand to meet your obligations when they are due.\n\nThe foundation of cash flow management is meticulous tracking of all inflows (income) and outflows (spending). This requires a detailed review of bank and credit card statements to gain a historical perspective and diligent ongoing tracking using a budgeting app or spreadsheet.\n\nA key strategy in a crisis is to create an "emergency spending plan" or a "bare-bones" budget. This is a stripped-down version of your full budget that includes only the absolute necessities required to live. Having this plan ready allows for swift action if income drops unexpectedly.\n\nOne of the most common and stressful cash flow problems is not a lack of money over the course of a month, but a mismatch in timing between paydays and bill due dates. A simple yet powerful strategy to resolve this is to proactively manage your due dates. Many creditors, landlords, and utility companies are willing to adjust your payment due date if you call and explain your situation. The goal is to align your major expenses to fall a few days *after* your predictable paydays. This action costs nothing but can dramatically reduce financial stress, prevent late fees, and eliminate the need to juggle funds between accounts.`,
                        resources: [
                            { type: 'link', title: 'Forbes: What Is Cash Flow And How Do You Manage It?', url: 'https://www.forbes.com/advisor/budgeting/what-is-cash-flow/' },
                            { type: 'youtube', title: 'How to Manage Your Cash Flow - The Money Guy Show', url: 'https://www.youtube.com/watch?v=ER23pGs2_b4' }
                        ]
                    },
                    { 
                        id: 'sec1-4', 
                        title: 'The Emergency Fund Imperative', 
                        takeaway: 'Build a $1,000 starter emergency fund before attacking any debt.', 
                        content: `Before attacking debt or investing, the absolute first priority after creating a budget is to build a starter emergency fund. This is a reserve of cash set aside exclusively for unplanned, essential expenses. Without this fund, any unexpected event—a car repair, an urgent medical bill—will inevitably lead to more high-interest debt, derailing your entire recovery plan and perpetuating the cycle of financial distress.\n\nWhile the long-term goal is to save 3 to 6 months of essential living expenses, this can feel impossibly distant when starting out. Therefore, the immediate, non-negotiable objective is to build a starter fund of $1,000. This amount is large enough to cover most common emergencies and provides a significant psychological boost.\n\nTo build this fund on a tight, garnished income:\n- **Make it a Budget Priority:** Treat the contribution to your emergency fund as a non-negotiable "bill" in your zero-based budget.\n- **Automate the Process:** Set up an automatic transfer from your checking account to a separate, high-yield savings account for every payday. Even a small amount, like $25, will build consistently over time.\n- **Dedicate Windfalls:** Any unexpected money, such as a tax refund, a gift, or surplus income from a high-earning month, should be allocated 100% to the emergency fund until the $1,000 goal is met.\n- **Generate Seed Money:** Selling unused household items can be a quick way to generate the initial capital for the fund.`, 
                        actionable: { type: 'add_saving', name: 'Emergency Fund', goal: 1000 },
                        resources: [
                            { type: 'link', title: 'Consumer Financial Protection Bureau: Emergency Fund Guide', url: 'https://www.consumerfinance.gov/start-small-save-up/start-your-emergency-savings/' },
                            { type: 'youtube', title: 'How To Build An Emergency Fund From Scratch - Dave Ramsey', url: 'https://www.youtube.com/watch?v=z6-8-d_Vv-c' }
                        ]
                    },
                ]
            },
            {
                id: 'part2',
                title: 'Part II: The Credit Score Comeback',
                sections: [
                    { id: 'sec2-1', title: 'Deconstructing Your Credit', takeaway: 'Understand the 5 FICO factors to prioritize your actions.', content: `The first step in any campaign is gathering intelligence. Before taking action, a thorough analysis of your credit reports from all three major credit bureaus—Experian, Equifax, and TransUnion—is essential. You are entitled to free weekly reports from each bureau via AnnualCreditReport.com, the official government-mandated source.\n\nThe FICO score, used by approximately 90% of top lenders, is calculated based on five factors with varying weights:\n- **Payment History (35%):** The most important factor. A single late payment can have a significant negative impact.\n- **Amounts Owed (30%):** Primarily measured by the credit utilization ratio—the percentage of your available credit that you are using.\n- **Length of Credit History (15%):** The average age of all your credit accounts. Older is better.\n- **Credit Mix (10%):** Having a healthy mix of revolving credit (like credit cards) and installment loans (like auto or personal loans).\n- **New Credit (10%):** The number of recent applications for new credit (hard inquiries).`, resources: [{type: 'link', title: 'MyFICO - What is in my FICO Score?', url: 'https://www.myfico.com/credit-education/whats-in-your-credit-score'}, {type: 'youtube', title: 'How Your Credit Score is Calculated - Graham Stephan', url: 'https://www.youtube.com/watch?v=3X_S69_o_wI'}] },
                    { id: 'sec2-2', title: 'The Rebuilding Toolkit', takeaway: 'Use a Credit-Builder Loan first, then a Secured Credit Card.', content: `With a damaged credit file, traditional unsecured credit is often inaccessible. Therefore, the recovery process must begin with specialized credit-building products designed specifically for this purpose.\n\n1. **Secured Credit Cards:** These are the cornerstone of credit rebuilding. A secured card requires a refundable cash deposit, which typically becomes your credit limit (e.g., a $200 deposit gives you a $200 credit limit). This eliminates the lender's risk, making these cards much easier to obtain for individuals with poor credit. The strategic use of this card is paramount: make one small, recurring purchase each month (e.g., a Netflix subscription), and set up automatic payments to pay the statement balance in full.\n\n2. **Credit-Builder Loans:** This is another powerful and highly accessible tool. Unlike a traditional loan, you do not receive the funds upfront. Instead, your monthly payments are deposited into a locked savings account. At the end of the loan term (typically 6-24 months), the funds are released to you. This type of loan adds a positive installment loan to your credit file, which helps to improve your "credit mix".\n\n**Optimal Strategy:** Apply for a credit-builder loan FIRST. Its near-guaranteed approval provides an immediate psychological victory and establishes a new, positive tradeline on your credit report within 30-60 days. This small, initial improvement in your credit profile increases the odds of being approved for a high-quality, low-fee secured credit card a few months later.`, type: 'checklist', resources: [{ type: 'link', title: 'Experian: What Is a Credit-Builder Loan?', url: 'https://www.experian.com/blogs/ask-experian/what-is-a-credit-builder-loan/'}] },
                    { id: 'sec2-3', title: 'The "Credit Piggybacking" Secret', takeaway: 'Become an authorized user only on a trusted person\'s well-managed account.', content: `One of the fastest but most misunderstood methods for boosting a credit score is becoming an authorized user (AU) on another person's credit card account. When a primary cardholder adds you as an AU, the entire history of that account—its age, credit limit, and payment history—is often added to your credit report. If the account is old and has been managed perfectly, this can result in a rapid and substantial increase in your credit score.\n\nHowever, this strategy comes with significant caveats. The practice of *buying* tradelines from brokers who connect you with strangers is highly risky, expensive, and considered deceptive by lenders. The only legitimate and recommended approach is to ask a trusted family member or close friend to add you as an AU. The ideal account is one that is many years old, has a flawless record of on-time payments, a high credit limit, and a consistently low balance (ideally below 10% utilization). It is crucial that you do not receive a physical card or use the account for spending; your role is solely to benefit from the positive credit history.`, resources: [{ type: 'link', title: 'Bankrate: Being an Authorized User', url: 'https://www.bankrate.com/finance/credit-cards/being-an-authorized-user/'}] },
                    { id: 'sec2-4', title: 'The Clean Slate Initiative', takeaway: 'Dispute errors in writing and use goodwill letters for isolated mistakes.', content: `A credit report is not an immutable record. It is a file that can and should be corrected for inaccuracies. Furthermore, even legitimate negative marks can sometimes be removed through polite negotiation.\n\n- **Disputing Errors:** The Fair Credit Reporting Act (FCRA) grants you the right to an accurate credit report. If you identify any errors during your initial review—incorrect account numbers, payments marked late that were on time, or accounts that do not belong to you—you must dispute them. The process involves sending a formal dispute letter, along with supporting documentation, to both the credit bureau reporting the error and the original creditor.\n\n- **Goodwill Letters:** For a legitimate late payment that was an isolated incident, particularly one caused by a verifiable hardship like a job loss or medical emergency, you can write a "goodwill letter" to the creditor. This is not a dispute; it is a polite request for the creditor to remove the negative mark as a gesture of goodwill, based on your otherwise positive history with them. While creditors are not obligated to honor these requests, this no-cost strategy can be surprisingly effective.`, resources: [{ type: 'link', title: 'CFPB: How to dispute an error on your credit report', url: 'https://www.consumerfinance.gov/ask-cfpb/how-do-i-dispute-an-error-on-my-credit-report-en-314/'}] },
                ]
            },
            {
                id: 'part3',
                title: 'Part III: From Stability to Growth',
                sections: [
                    { id: 'sec3-1', title: 'The Debt Demolition Derby', takeaway: 'Use the "Snowball" method for motivation, then the "Avalanche" for efficiency.', content: `High-interest debt is a primary obstacle to wealth creation. Two primary strategies exist for aggressively paying down debt:\n\n1. **The Debt Snowball Method:** With this method, you list your debts from the smallest balance to the largest, irrespective of interest rates. You make minimum payments on all debts but direct any extra funds toward the smallest balance. Once it is paid off, you "roll" that entire payment onto the next-smallest debt. The primary benefit of this method is psychological; achieving quick wins by eliminating small debts builds momentum and motivation to continue.\n\n2. **The Debt Avalanche Method:** This method prioritizes debts from the highest interest rate to the lowest. You make minimum payments on all debts but direct any extra funds to the one with the highest Annual Percentage Rate (APR). This approach is mathematically optimal, as it minimizes the total amount of interest paid over the life of the loans.\n\nA powerful hybrid approach is the "Snow-Lanche": Start with the Snowball to knock out one or two small debts for a motivational boost, then switch to the Avalanche to tackle the remaining high-interest debt efficiently.`, resources: [{type: 'youtube', title: 'Debt Snowball vs. Debt Avalanche - The Money Guy Show', url: 'https://www.youtube.com/watch?v=sI_1A8k2j6s'}] },
                    { id: 'sec3-2', title: 'The Power of Compounding', takeaway: 'Shift from paying compound interest on debt to earning it on investments.', content: `The principle of compound interest is the engine of wealth creation. It is the phenomenon where the returns earned on your investments begin to generate their own returns, leading to exponential growth over long periods.\n\nConsider a simple example: an initial investment of $1,000 earning an 8% annual return.\n- **Year 1:** The investment earns $80 in interest, for a total of $1,080.\n- **Year 2:** The investment earns 8% on the new total of $1,080, which is $86.40. The total is now $1,166.40.\n\nThis same mathematical force works destructively with high-interest debt, where interest charges compound against you. By shifting from paying high-interest debt to earning investment returns, you are turning this powerful force from an adversary into your greatest ally in building wealth.`, resources: [{type: 'link', title: 'Investopedia: The Power of Compound Interest', url: 'https://www.investopedia.com/terms/c/compoundinterest.asp'}] },
                    { id: 'sec3-3', title: 'Your First Investments', takeaway: 'A single, low-cost "total market" ETF is a powerful and simple starting point.', content: `Investing does not need to be complex or stressful. For beginners, the most proven path to long-term wealth is through low-cost, broadly diversified index funds and Exchange-Traded Funds (ETFs).\n\nAn index fund is a type of mutual fund or ETF that aims to replicate the performance of a specific market index, such as the S&P 500. Both offer the key benefits of instant diversification (owning a small piece of hundreds or thousands of companies) and extremely low fees (expense ratios).\n\nThe process for a new investor is straightforward:\n1. **Establish Financial Prerequisites:** Ensure you have a starter emergency fund and have paid off or have a firm plan for any high-interest consumer debt before investing.\n2. **Define Goals and Risk Tolerance:** Determine your investment horizon and your ability to withstand market volatility.\n3. **Open a Brokerage Account:** Open an investment account with a reputable, low-cost online broker such as Vanguard, Fidelity, or Charles Schwab.\n4. **Make Your First Investment:** To eliminate the stress of choice, a new investor can achieve excellent diversification with a single fund. A "total stock market" ETF (like VTI) or a "total world stock" ETF (like VT) provides exposure to thousands of companies.`, resources: [{type: 'youtube', title: 'A Simple Explanation of Index Funds - Kevin Explains', url: 'https://www.youtube.com/watch?v=gYj2gA1y-8c'}] },
                    { id: 'sec3-4', title: 'Tax-Advantaged Retirement Planning', takeaway: 'Prioritize 401(k) match, then a Roth IRA, then back to the 401(k).', content: `The U.S. tax code provides powerful incentives for retirement savings through specialized accounts like 401(k)s and Individual Retirement Accounts (IRAs). These accounts allow your investments to grow in a tax-sheltered environment, dramatically accelerating the power of compounding.\n\nThe optimal prioritization strategy is therefore:\n1. **Contribute to your 401(k) up to the full amount of your employer's match.** Do not leave this free money on the table.\n2. **Fully fund a Roth IRA up to the annual limit.** A key "secret" of the Roth IRA is that you can withdraw your contributions (not earnings) tax-free and penalty-free at any time, allowing it to double as a long-term emergency fund.\n3. **If you have additional funds to invest, return to your 401(k)** and contribute more, up to the maximum annual limit.`, type: 'checklist', resources: [{ type: 'link', title: 'Investopedia: Roth vs. Traditional IRA', url: 'https://www.investopedia.com/retirement/roth-vs-traditional-ira-which-is-right-for-you/'}] },
                ]
            },
        ];

        // --- ICONS ---
        const BookOpen = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-book-open"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>);
        const Target = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-target"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>);
        const Lightbulb = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-lightbulb"><path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"/><path d="M9 18h6"/><path d="M10 22h4"/></svg>);
        const LinkIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-link"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.72"/><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.72"/></svg>);
        const PhoenixLogo = () => (<img src="https://i.imgur.com/AhkBCr0.png" alt="Phoenix Plan Logo" className="w-12 h-12" onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/48x48/111827/FFFFFF?text=Logo'; }} />);
        const Wifi = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12.55a11 11 0 0 1 14.08 0"/><path d="M1.42 9a16 16 0 0 1 21.16 0"/><path d="M8.53 16.11a6 6 0 0 1 6.95 0"/><line x1="12" x2="12.01" y1="20" y2="20"/></svg>);
        const Calculator = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2"/><line x1="8" x2="16" y1="6" y2="6"/><line x1="16" x2="16" y1="14" y2="18"/><line x1="16" x2="12" y1="10" y2="10"/><line x1="12" x2="8" y1="10" y2="10"/><line x1="12" x2="12" y1="14" y2="18"/><line x1="8" x2="8" y1="14" y2="18"/></svg>);
        const Flame = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z" /></svg>);
        const YoutubeIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17"/><path d="m10 15 5-3-5-3z"/></svg>);
        const ExternalLinkIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h6v6"/><path d="M10 14 21 3"/><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/></svg>);
        const Download = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>);

        // --- Background Canvas Component ---
        const BackgroundCanvas = () => {
            const sketchRef = React.useRef(null);
            React.useEffect(() => {
                const sketch = (p) => {
                    let particles = [];
                    p.setup = () => {
                        let canvas = p.createCanvas(p.windowWidth, p.windowHeight);
                        canvas.id('bgCanvas');
                        for (let i = 0; i < 20; i++) {
                            particles.push({ x: p.random(p.width), y: p.random(p.height), size: p.random(2, 4), speedX: p.random(-0.3, 0.3), speedY: p.random(-0.3, 0.3) });
                        }
                    };
                    p.draw = () => {
                        p.clear();
                        particles.forEach(part => {
                            p.noStroke(); p.fill(249, 115, 22, 50); p.ellipse(part.x, part.y, part.size);
                            part.x += part.speedX; part.y += part.speedY;
                            if (part.x < 0 || part.x > p.width) part.speedX *= -1;
                            if (part.y < 0 || part.y > p.height) part.speedY *= -1;
                        });
                    };
                    p.windowResized = () => p.resizeCanvas(p.windowWidth, p.windowHeight);
                };
                new p5(sketch, sketchRef.current);
            }, []);
            return <div ref={sketchRef} className="fixed top-0 left-0 -z-10" />;
        };

        // --- Dashboard Components ---
        const MyCards = ({ balance }) => (
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                <h3 className="text-lg font-semibold mb-4">My Cards</h3>
                <div className="p-5 rounded-lg text-white space-y-8 relative overflow-hidden h-48 flex flex-col justify-between bg-black">
                    <img src="https://i.imgur.com/AhkBCr0.png" className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-48 h-48 object-contain z-0 opacity-50" alt="Phoenix logo background" onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/200x200/000000/FFFFFF?text=Logo'; }} />
                    <div className="relative z-20"><p className="text-sm opacity-80">Balance</p><p className="text-2xl font-bold">${balance.toFixed(2)}</p></div>
                    <div className="flex justify-between items-center relative z-20"><p className="font-mono text-lg tracking-wider">**** **** **** 1234</p><Wifi className="w-6 h-6 opacity-80" /></div>
                </div>
            </div>
        );

        const AddFunds = ({ onAdd }) => {
            const handleSubmit = (e) => {
                e.preventDefault();
                const amount = parseFloat(e.target.elements.amount.value);
                const source = e.target.elements.source.value;
                if (amount > 0 && source) {
                    onAdd({ name: source, amount });
                    e.target.reset();
                }
            };
            return (
                <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                    <h3 className="text-lg font-semibold mb-4">Add Windfall/Extra Income</h3>
                    <form onSubmit={handleSubmit} className="space-y-3">
                        <input type="text" name="source" placeholder="Source (e.g., Side Job)" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" required />
                        <div className="flex items-center space-x-2">
                            <input type="number" name="amount" placeholder="Amount" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" step="0.01" required />
                            <button type="submit" className="bg-green-600 hover:bg-green-700 text-white font-bold p-2 rounded-md transition-colors">Add</button>
                        </div>
                    </form>
                </div>
            );
        };
        
        const AddOneTimeExpense = ({ onAdd }) => {
            const handleSubmit = (e) => {
                e.preventDefault();
                const name = e.target.elements.name.value;
                const amount = parseFloat(e.target.elements.amount.value);
                if (name && amount > 0) {
                    onAdd({ name, amount });
                    e.target.reset();
                }
            };
            return (
                <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                    <h3 className="text-lg font-semibold mb-4">Log One-Time Expense</h3>
                    <form onSubmit={handleSubmit} className="space-y-3">
                        <input type="text" name="name" placeholder="Expense Name (e.g., Coffee)" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" required />
                        <div className="flex items-center space-x-2">
                            <input type="number" name="amount" placeholder="Amount" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" step="0.01" required />
                            <button type="submit" className="bg-red-600 hover:bg-red-700 text-white font-bold p-2 rounded-md transition-colors">Log</button>
                        </div>
                    </form>
                </div>
            );
        };


        const BalanceChart = ({ initialIncome, expenses, transactions }) => {
            const chartRef = React.useRef(null);
            const chartInstance = React.useRef(null);
            const [filter, setFilter] = React.useState('30D');
            const [isExportOpen, setIsExportOpen] = React.useState(false);
            const [chartData, setChartData] = React.useState([]);

            const exportChart = (format) => {
                if (format === 'png') {
                    const link = document.createElement('a');
                    link.href = chartInstance.current.toBase64Image();
                    link.download = 'balance-history.png';
                    link.click();
                } else if (format === 'csv') {
                    let csvContent = "data:text/csv;charset=utf-8,";
                    csvContent += "Date,Balance\n";
                    chartData.forEach(row => {
                        const date = new Date(row.x).toLocaleDateString();
                        csvContent += `${date},${row.y.toFixed(2)}\n`;
                    });
                    const encodedUri = encodeURI(csvContent);
                    const link = document.createElement("a");
                    link.setAttribute("href", encodedUri);
                    link.setAttribute("download", "balance_history.csv");
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                setIsExportOpen(false);
            };

            React.useEffect(() => {
                if (chartRef.current) {
                    const allTransactions = [
                        ...(transactions || []),
                        ...(expenses || []).map(e => ({...e, amount: e.monthlyAmount, type: 'Monthly Expense', date: new Date().toISOString()}))
                    ].sort((a,b) => new Date(a.date) - new Date(b.date));

                    let balance = initialIncome;
                    const history = [{x: new Date(allTransactions[0]?.date || Date.now()).getTime() - 86400000, y: balance}];

                    allTransactions.forEach(t => {
                        if (t.type === 'Income') {
                            balance += t.amount;
                        } else {
                            balance -= t.amount;
                        }
                        history.push({x: new Date(t.date).getTime(), y: balance});
                    });
                    
                    let filteredData = history;
                    if (filter !== 'All') {
                        const now = new Date();
                        const daysToSubtract = filter === '7D' ? 7 : 30;
                        const startDate = new Date(now.setDate(now.getDate() - daysToSubtract));
                        filteredData = history.filter(point => new Date(point.x) >= startDate);
                    }
                    setChartData(filteredData);
                    
                    const ctx = chartRef.current.getContext('2d');
                    if (chartInstance.current) chartInstance.current.destroy();

                    chartInstance.current = new Chart(ctx, {
                        type: 'line',
                        data: {
                            datasets: [{
                                label: 'Balance',
                                data: filteredData,
                                borderColor: 'rgba(249, 115, 22, 1)',
                                backgroundColor: 'rgba(249, 115, 22, 0.2)',
                                fill: true,
                                tension: 0.4,
                            }]
                        },
                        options: {
                            responsive: true, maintainAspectRatio: false,
                            plugins: { legend: { display: false } },
                            scales: {
                                x: { 
                                    type: 'time',
                                    time: { unit: 'day' },
                                    ticks: { color: '#9ca3af' }, 
                                    grid: { color: 'rgba(255,255,255,0.1)' } 
                                },
                                y: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255,255,255,0.1)' } }
                            }
                        }
                    });
                }
            }, [initialIncome, expenses, transactions, filter]);

            return (
                 <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg h-full flex flex-col">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Balance History</h3>
                        <div className="flex items-center space-x-1">
                            <div className="flex space-x-1 bg-gray-700/50 p-1 rounded-md">
                                <button onClick={() => setFilter('7D')} className={`px-2 py-1 text-xs rounded ${filter === '7D' ? 'bg-orange-600' : ''}`}>7D</button>
                                <button onClick={() => setFilter('30D')} className={`px-2 py-1 text-xs rounded ${filter === '30D' ? 'bg-orange-600' : ''}`}>30D</button>
                                <button onClick={() => setFilter('All')} className={`px-2 py-1 text-xs rounded ${filter === 'All' ? 'bg-orange-600' : ''}`}>All</button>
                            </div>
                            <div className="relative">
                                <button onClick={() => setIsExportOpen(!isExportOpen)} className="p-1.5 bg-gray-700/50 rounded-md hover:bg-gray-600"><Download width={16} height={16} /></button>
                                {isExportOpen && (
                                    <div className="absolute right-0 mt-2 w-32 bg-gray-700 rounded-md shadow-lg z-10">
                                        <button onClick={() => exportChart('png')} className="block w-full text-left px-4 py-2 text-sm text-gray-200 hover:bg-orange-600 rounded-t-md">Export as PNG</button>
                                        <button onClick={() => exportChart('csv')} className="block w-full text-left px-4 py-2 text-sm text-gray-200 hover:bg-orange-600 rounded-b-md">Export as CSV</button>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className="flex-grow h-48"><canvas ref={chartRef}></canvas></div>
                </div>
            );
        };
        
        const LatestTransactions = ({ transactions }) => (
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                <h3 className="text-lg font-semibold mb-4">Latest Transactions</h3>
                <div className="space-y-3 max-h-48 overflow-y-auto pr-2">
                    {transactions.length > 0 ? transactions.slice(0, 5).map(t => (
                        <div key={t.id} className="flex justify-between items-center bg-gray-700/50 p-2 rounded-md">
                            <div><p className="font-semibold">{t.name}</p><p className="text-xs text-gray-400">{t.type}</p></div>
                            <p className={`font-bold ${t.type.includes('Expense') ? 'text-red-400' : 'text-green-400'}`}>{t.type.includes('Expense') ? '-' : '+'}${t.amount.toFixed(2)}</p>
                        </div>
                    )) : <p className="text-sm text-gray-500 text-center py-4">No transactions yet.</p>}
                </div>
            </div>
        );
        
        const MySavings = ({ goals, onAddGoal, prefill }) => {
            const [name, setName] = React.useState('');
            const [goal, setGoal] = React.useState('');

            React.useEffect(() => { if(prefill) { setName(prefill.name); setGoal(prefill.goal); } }, [prefill]);

            const handleAdd = (e) => {
                e.preventDefault();
                if(!name || !goal || parseFloat(goal) <= 0) return;
                onAddGoal({ name, goal: parseFloat(goal) });
                setName(''); setGoal('');
            };

            return (
                <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                    <h3 className="text-lg font-semibold mb-4">My Savings</h3>
                    <div className="space-y-4 max-h-48 overflow-y-auto pr-2 mb-4">
                        {goals.length > 0 ? goals.map(g => {
                            const progress = g.goal > 0 ? (g.saved / g.goal) * 100 : 0;
                            return (
                                <div key={g.id}>
                                    <div className="flex justify-between text-sm mb-1"><span className="font-semibold">{g.name}</span><span className="text-gray-400">${g.saved.toFixed(0)} / ${g.goal.toFixed(0)}</span></div>
                                    <div className="w-full bg-gray-700 rounded-full h-2.5"><div className="bg-orange-500 h-2.5 rounded-full" style={{width: `${progress}%`, transition: 'width 0.5s ease'}}></div></div>
                                </div>
                            );
                        }) : <p className="text-sm text-gray-500 text-center py-4">No savings goals yet.</p>}
                    </div>
                     <form onSubmit={handleAdd} className="space-y-3 border-t border-gray-700 pt-4">
                         <input type="text" value={name} onChange={e => setName(e.target.value)} placeholder="New Goal Name" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" required />
                         <div className="flex items-center space-x-2">
                            <input type="number" value={goal} onChange={e => setGoal(e.target.value)} placeholder="Amount ($)" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" required />
                            <button type="submit" className="bg-orange-600 hover:bg-orange-700 text-white font-bold p-2 rounded-md transition-colors">Add</button>
                         </div>
                    </form>
                </div>
            );
        };

        const FinancialHealth = ({ userData }) => {
            const [healthScore, setHealthScore] = React.useState(null);
            const [isLoading, setIsLoading] = React.useState(false);

            const getFinancialHealth = async () => {
                setIsLoading(true);
                setHealthScore(null);
                
                const expenseList = userData.expenses.map(e => `- ${e.name}: $${e.monthlyAmount.toFixed(2)}`).join('\n');
                const savingsList = userData.savingsGoals.map(g => `- ${g.name} (Goal: $${g.goal.toFixed(2)})`).join('\n');
                const prompt = `Based on a monthly income of $${userData.income.toFixed(2)}, monthly expenses of $${userData.expenses.reduce((sum, e) => sum + e.monthlyAmount, 0).toFixed(2)} listed as:\n${expenseList}\nAnd savings goals:\n${savingsList}\nCalculate a 'Financial Health Score' from 1 to 100. Also provide a one-sentence explanation for the score and one actionable tip. Respond ONLY with a valid JSON object like {"score": 85, "explanation": "Your savings rate is strong and your expenses are well-managed.", "tip": "Consider automating a small weekly transfer to your Emergency Fund to reach your goal faster."}`;
                
                try {
                    let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
                    const payload = { contents: chatHistory };
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) throw new Error(`API Error: ${response.status}`);
                    
                    const result = await response.json();
                    const text = result.candidates[0].content.parts[0].text;
                    const parsedJson = JSON.parse(text.replace(/```json|```/g, '').trim());
                    setHealthScore(parsedJson);

                } catch (error) {
                    console.error("Error fetching health score:", error);
                    setHealthScore({ score: 'Error', explanation: 'Could not retrieve analysis.', tip: 'Please try again later.' });
                } finally {
                    setIsLoading(false);
                }
            };

            return (
                 <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                    <h3 className="text-lg font-semibold mb-4">AI Financial Health</h3>
                    {healthScore ? (
                        <div className="text-center">
                            <p className="text-6xl font-bold text-orange-400">{healthScore.score}</p>
                            <p className="text-gray-300 mt-2">{healthScore.explanation}</p>
                            <p className="text-sm text-yellow-400 mt-4 bg-yellow-400/10 p-2 rounded-md"><strong>Tip:</strong> {healthScore.tip}</p>
                        </div>
                    ) : (
                        <p className="text-sm text-gray-400 mb-3">Get an AI-powered analysis of your budget.</p>
                    )}
                    <button onClick={getFinancialHealth} disabled={isLoading} className="w-full mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded-md transition-colors disabled:bg-gray-500">
                        {isLoading ? 'Analyzing...' : healthScore ? 'Re-Analyze' : '✨ Analyze My Health'}
                    </button>
                </div>
            )
        };
        
        // --- Dashboard Component ---
        const Dashboard = ({ prefill, onTakeAction, userData, onUpdate }) => {
            const [prefillSaving, setPrefillSaving] = React.useState(null);

            React.useEffect(() => { if (prefill) setPrefillSaving({ name: prefill.name, goal: prefill.goal }); }, [prefill]);
            
            const addOneTimeTransaction = (transaction, type) => {
                const newTransaction = {
                    id: Date.now(),
                    name: transaction.name,
                    amount: transaction.amount,
                    type: type,
                    date: new Date().toISOString()
                };
                const newTransactions = [newTransaction, ...(userData.transactions || [])];
                let newIncome = userData.income;
                if (type === 'Income') {
                    newIncome += transaction.amount;
                }
                onUpdate({ ...userData, transactions: newTransactions, income: newIncome });
            };

            const addSavingsGoal = (goal) => {
                const newGoal = { id: Date.now(), saved: 0, ...goal };
                onUpdate({ ...userData, savingsGoals: [...userData.savingsGoals, newGoal] });
            };
            
            const totalMonthlyExpenses = userData.expenses.reduce((sum, exp) => sum + exp.monthlyAmount, 0);
            const oneTimeExpenses = (userData.transactions || []).filter(t => t.type === 'Expense').reduce((sum, t) => sum + t.amount, 0);
            const balance = userData.income - totalMonthlyExpenses - oneTimeExpenses;
            const allTransactions = [
                ...(userData.expenses || []).map(e => ({...e, amount: e.monthlyAmount, type: 'Monthly Expense'})),
                ...(userData.transactions || [])
            ].sort((a,b) => new Date(b.date) - new Date(a.date));

            return (
                <main className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div className="space-y-6">
                        <MyCards balance={balance} />
                        <AddFunds onAdd={(income) => addOneTimeTransaction(income, 'Income')} />
                        <AddOneTimeExpense onAdd={(expense) => addOneTimeTransaction(expense, 'Expense')} />
                    </div>
                    <div className="space-y-6">
                        <BalanceChart initialIncome={userData.income} expenses={userData.expenses} transactions={userData.transactions || []} />
                        <LatestTransactions transactions={allTransactions} />
                    </div>
                    <div className="space-y-6">
                        <MySavings goals={userData.savingsGoals} onAddGoal={addSavingsGoal} prefill={prefillSaving} />
                        <FinancialHealth userData={userData} />
                    </div>
                </main>
            );
        };
        
        // --- Guides / Library Component ---
        const GuidesLibrary = ({ guides, onTakeAction }) => {
            const [activeSection, setActiveSection] = React.useState(null);
            
            const formatContent = (content) => {
                const paragraphs = content.split('\n\n');
                return paragraphs.map((p, pIndex) => {
                    if (p.startsWith('- ')) {
                        const listItems = p.split('\n').map((li, liIndex) => {
                            const parts = li.replace(/^- /, '').split(/(\*\*.*?\*\*)/g).filter(Boolean);
                            return <li key={`${pIndex}-${liIndex}`} className="ml-5 list-disc">{parts.map((part, partIndex) => {
                                if (part.startsWith('**') && part.endsWith('**')) {
                                    return <strong key={partIndex} className="text-orange-400">{part.slice(2, -2)}</strong>;
                                }
                                return part;
                            })}</li>;
                        });
                        return <ul key={pIndex} className="space-y-2">{listItems}</ul>;
                    }
                    
                    const parts = p.split(/(\*\*.*?\*\*)/g).filter(Boolean);
                    return <p key={pIndex}>{parts.map((part, partIndex) => {
                        if (part.startsWith('**') && part.endsWith('**')) {
                            return <strong key={partIndex} className="text-orange-400">{part.slice(2, -2)}</strong>;
                        }
                        return part;
                    })}</p>;
                });
            };

            return (
                <main className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    <aside className="md:col-span-1 lg:col-span-1 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-4 rounded-xl">
                        <h2 className="text-xl font-semibold mb-4">Library</h2>
                        <nav className="space-y-4">
                            {guides.map(guide => (
                                <div key={guide.id}>
                                    <h3 className="font-bold text-orange-400">{guide.title}</h3>
                                    <ul className="mt-1 space-y-1 pl-2">
                                        {guide.sections.map(section => (
                                            <li key={section.id}><button onClick={() => setActiveSection(section)} className={`w-full text-left text-sm p-2 rounded-md transition-colors ${activeSection?.id === section.id ? 'bg-orange-600 text-white' : 'hover:bg-gray-700'}`}>{section.title}</button></li>
                                        ))}
                                    </ul>
                                </div>
                            ))}
                        </nav>
                    </aside>
                    <div className="md:col-span-2 lg:col-span-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl min-h-[75vh]">
                        {activeSection ? (
                            <div>
                                <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-yellow-500 mb-4">{activeSection.title}</h2>
                                <div className="bg-gray-900/50 border border-orange-500/30 p-4 rounded-lg mb-6 flex items-start space-x-4">
                                    <Lightbulb className="text-orange-400 flex-shrink-0 mt-1" />
                                    <div><h4 className="font-bold text-orange-400">Key Takeaway</h4><p className="text-gray-300">{activeSection.takeaway}</p></div>
                                </div>
                                <div className="prose prose-invert max-w-none text-gray-300 space-y-4">
                                    {formatContent(activeSection.content)}
                                </div>
                                {activeSection.resources && (
                                     <div className="mt-8 border-t border-gray-700 pt-6">
                                        <h3 className="text-lg font-semibold mb-4 text-orange-400">Further Learning</h3>
                                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                            {activeSection.resources.map(res => (
                                                <a href={res.url} target="_blank" rel="noopener noreferrer" key={res.url} className="bg-gray-700/50 p-4 rounded-lg flex items-center space-x-4 hover:bg-gray-700 transition-colors">
                                                    {res.type === 'youtube' ? <YoutubeIcon className="w-8 h-8 text-red-500 flex-shrink-0" /> : <ExternalLinkIcon className="w-8 h-8 text-blue-400 flex-shrink-0" />}
                                                    <div>
                                                        <p className="font-semibold">{res.title}</p>
                                                        <p className="text-xs text-gray-400">{res.type === 'youtube' ? 'Watch on YouTube' : 'Read Article'}</p>
                                                    </div>
                                                </a>
                                            ))}
                                        </div>
                                     </div>
                                )}
                                {activeSection.actionable && (
                                    <div className="mt-8 border-t border-gray-700 pt-6">
                                        <button onClick={() => onTakeAction(activeSection.actionable)} className="w-full flex items-center justify-center bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-300 space-x-2">
                                            <LinkIcon size={18}/><span>Take Action: Add '{activeSection.actionable.name}' to My Dashboard</span>
                                        </button>
                                    </div>
                                )}
                            </div>
                        ) : (
                            <div className="flex flex-col items-center justify-center h-full text-center text-gray-500">
                                <BookOpen size={48} className="mb-4" /><h2 className="text-2xl font-semibold">Welcome to the Phoenix Plan Library</h2><p className="mt-2 max-w-md">Select a topic from the sidebar to learn key strategies for financial recovery, credit rebuilding, and wealth creation.</p>
                            </div>
                        )}
                    </div>
                </main>
            );
        };

        // --- Tools & Calculators Component ---
        const Tools = () => {
             const [dailyCost, setDailyCost] = React.useState(null);
             const [debtResult, setDebtResult] = React.useState(null);
             const [compoundResult, setCompoundResult] = React.useState(null);

             const calculateDaily = (e) => {
                const monthly = parseFloat(e.target.value);
                if (!monthly || monthly <= 0) { setDailyCost(null); return; }
                setDailyCost({ daily: monthly / 30, weekly: monthly / 4.33, yearly: monthly * 12 });
             };

             const calculateDebt = (e) => {
                e.preventDefault();
                const amount = parseFloat(e.target.elements.debtAmount.value);
                const rate = parseFloat(e.target.elements.debtRate.value) / 100 / 12;
                const payment = parseFloat(e.target.elements.debtPayment.value);
                if (!amount || !rate || !payment || payment <= amount * rate) { setDebtResult(null); return; }
                const months = Math.ceil(Math.log(payment / (payment - amount * rate)) / Math.log(1 + rate));
                setDebtResult({ months, totalInterest: (payment * months) - amount });
             };

             const calculateCompound = (e) => {
                e.preventDefault();
                const initial = parseFloat(e.target.elements.initial.value) || 0;
                const monthly = parseFloat(e.target.elements.monthly.value) || 0;
                const rate = parseFloat(e.target.elements.rate.value) / 100;
                const years = parseFloat(e.target.elements.years.value);
                if (!years) { setCompoundResult(null); return; }
                const months = years * 12;
                const monthlyRate = rate / 12;
                let futureValue = initial * Math.pow(1 + monthlyRate, months);
                if (monthly > 0) {
                    futureValue += monthly * ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);
                }
                setCompoundResult({ futureValue });
             };
             
             return (
                <main className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                        <h3 className="text-lg font-semibold mb-4">Daily Cost Calculator</h3>
                        <p className="text-sm text-gray-400 mb-4">Break down any monthly cost into smaller, more manageable chunks. This helps visualize where your money is going day-to-day.</p>
                        <input type="number" placeholder="Enter monthly amount" onChange={calculateDaily} className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" />
                        {dailyCost && <div className="mt-4 text-center"><p className="text-3xl font-bold text-orange-400">${dailyCost.daily.toFixed(2)}</p><p className="text-gray-400">per day</p></div>}
                    </div>
                    <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                        <h3 className="text-lg font-semibold mb-4">Debt Payoff Calculator</h3>
                        <p className="text-sm text-gray-400 mb-4">Enter your debt details to see how long it will take to become debt-free. Use this to stay motivated on your debt demolition journey!</p>
                        <form onSubmit={calculateDebt} className="space-y-3">
                            <input type="number" name="debtAmount" placeholder="Total Debt" className="w-full bg-gray-700 rounded-md p-2" />
                            <input type="number" name="debtRate" placeholder="APR (%)" className="w-full bg-gray-700 rounded-md p-2" />
                            <input type="number" name="debtPayment" placeholder="Monthly Payment" className="w-full bg-gray-700 rounded-md p-2" />
                            <button type="submit" className="w-full bg-orange-600 p-2 rounded-md">Calculate</button>
                        </form>
                        {debtResult && <div className="mt-4 text-center"><p className="text-xl font-bold">{debtResult.months} months</p><p className="text-gray-400">to be debt-free</p></div>}
                    </div>
                    <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                        <h3 className="text-lg font-semibold mb-4">Compound Interest</h3>
                        <p className="text-sm text-gray-400 mb-4">See how your money can grow over time with the power of compounding. This is your key to building long-term wealth.</p>
                        <form onSubmit={calculateCompound} className="space-y-3">
                            <input type="number" name="initial" placeholder="Initial Investment" className="w-full bg-gray-700 rounded-md p-2" />
                            <input type="number" name="monthly" placeholder="Monthly Contribution" className="w-full bg-gray-700 rounded-md p-2" />
                            <input type="number" name="rate" placeholder="Annual Rate (%)" defaultValue="8" className="w-full bg-gray-700 rounded-md p-2" />
                            <input type="number" name="years" placeholder="Years" defaultValue="10" className="w-full bg-gray-700 rounded-md p-2" />
                            <button type="submit" className="w-full bg-orange-600 p-2 rounded-md">Calculate</button>
                        </form>
                        {compoundResult && <div className="mt-4 text-center"><p className="text-xl font-bold">${compoundResult.futureValue.toFixed(2)}</p><p className="text-gray-400">future value</p></div>}
                    </div>
                </main>
             );
        };
        
        // --- Setup Wizard Component ---
        const SetupWizard = ({ onSetupComplete }) => {
            const handleSubmit = (e) => {
                e.preventDefault();
                const name = e.target.elements.setupName.value;
                const income = parseFloat(e.target.elements.setupIncome.value);
                onSetupComplete({
                    name: name || 'Friend',
                    income: income || 3000,
                    expenses: [],
                    savingsGoals: [],
                    transactions: [],
                    journey: { milestones: [] }
                });
            };
            return (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h2 className="text-2xl font-bold text-orange-400 mb-4">Welcome to Your Phoenix Journey! 🔥</h2>
                        <p className="mb-6 text-gray-300">Let's set up your financial profile to get started.</p>
                        <form onSubmit={handleSubmit} className="space-y-4">
                            <div><label className="text-sm text-gray-400">Your Name</label><input type="text" name="setupName" placeholder="Enter your name" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" /></div>
                            <div><label className="text-sm text-gray-400">Monthly Income (After Tax)</label><input type="number" name="setupIncome" placeholder="e.g., 3000" className="w-full bg-gray-700 border-gray-600 rounded-md px-3 py-2" required /></div>
                            <button type="submit" className="w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 rounded-md transition-colors">Start My Phoenix Plan</button>
                        </form>
                    </div>
                </div>
            );
        };
        
        // --- Journey Component ---
        const MyJourney = ({ userData, onUpdate }) => {
            const milestones = [
                { id: 'setup', text: 'Set up income and budget', isComplete: userData.income > 0 },
                { id: 'emergency_fund', text: 'Create an Emergency Fund goal', isComplete: userData.savingsGoals.some(g => g.name.toLowerCase().includes('emergency')) },
                { id: 'first_expense', text: 'Add your first expense', isComplete: userData.expenses.length > 0 },
                { id: 'debt_paid', text: 'Pay off a debt (coming soon)', isComplete: false },
                { id: 'credit_score', text: 'Reach 650 credit score (coming soon)', isComplete: false },
                { id: 'investing', text: 'Start investing (coming soon)', isComplete: false },
            ];

            return (
                <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-6 rounded-xl shadow-lg">
                    <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-yellow-500 mb-4">Your Phoenix Journey</h2>
                    <p className="text-gray-400 mb-6">Follow these steps to rise from financial ashes and achieve true freedom. Complete tasks in the app to unlock milestones.</p>
                    <div className="space-y-4">
                        {milestones.map(m => (
                             <div key={m.id} className={`p-4 rounded-lg flex items-center space-x-4 transition-all ${m.isComplete ? 'bg-green-500/20 border-l-4 border-green-500' : 'bg-gray-700/50'}`}>
                                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${m.isComplete ? 'bg-green-500' : 'border-2 border-gray-500'}`}>
                                    {m.isComplete && <svg className="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="3" d="M5 13l4 4L19 7" /></svg>}
                                </div>
                                <span className={`${m.isComplete ? 'text-gray-400 line-through' : 'text-white'}`}>{m.text}</span>
                             </div>
                        ))}
                    </div>
                </div>
            );
        };


        // --- Main Application Component ---
        function App() {
            const [userData, setUserData] = React.useState(null);
            const [activeTab, setActiveTab] = React.useState('tracker');
            const [prefillData, setPrefillData] = React.useState(null);

            React.useEffect(() => {
                const savedData = localStorage.getItem('phoenix-plan-data-v4');
                if (savedData) {
                    setUserData(JSON.parse(savedData));
                }
            }, []);

            const handleDataUpdate = (newData) => {
                setUserData(newData);
                localStorage.setItem('phoenix-plan-data-v4', JSON.stringify(newData));
            };

            const handleTakeAction = (action) => {
                if (action.type === 'add_saving') {
                    setPrefillData({ name: action.name, goal: action.goal });
                    setActiveTab('tracker');
                }
            };
            
            React.useEffect(() => { if (prefillData) { const timer = setTimeout(() => setPrefillData(null), 100); return () => clearTimeout(timer); } }, [prefillData]);

            if (!userData) {
                return <SetupWizard onSetupComplete={handleDataUpdate} />;
            }

            return (
                <>
                    <BackgroundCanvas />
                    <div className="min-h-screen p-4 sm:p-6 lg:p-8 relative z-10 flex flex-col">
                        <div className="max-w-7xl mx-auto w-full flex flex-col flex-grow">
                            <header className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0 mb-8">
                                <div className="flex items-center space-x-4">
                                    <PhoenixLogo />
                                    <div>
                                        <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-yellow-500">The Phoenix Plan</h1>
                                        <p className="text-gray-400">Welcome back, {userData.name}!</p>
                                    </div>
                                </div>
                                <nav className="flex space-x-1 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 p-1 rounded-lg">
                                    <button onClick={() => setActiveTab('tracker')} className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${activeTab === 'tracker' ? 'bg-orange-600 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}><div className="flex items-center space-x-2"><Target size={16} /><span>Dashboard</span></div></button>
                                    <button onClick={() => setActiveTab('journey')} className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${activeTab === 'journey' ? 'bg-orange-600 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}><div className="flex items-center space-x-2"><Flame size={16} /><span>My Journey</span></div></button>
                                    <button onClick={() => setActiveTab('guides')} className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${activeTab === 'guides' ? 'bg-orange-600 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}><div className="flex items-center space-x-2"><BookOpen size={16} /><span>Guides</span></div></button>
                                    <button onClick={() => setActiveTab('tools')} className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${activeTab === 'tools' ? 'bg-orange-600 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}><div className="flex items-center space-x-2"><Calculator size={16} /><span>Tools</span></div></button>
                                </nav>
                            </header>
                            <main className="flex-grow">
                                {activeTab === 'tracker' && <Dashboard prefill={prefillData} onTakeAction={handleTakeAction} userData={userData} onUpdate={handleDataUpdate} />}
                                {activeTab === 'journey' && <MyJourney userData={userData} onUpdate={handleDataUpdate} />}
                                {activeTab === 'guides' && <GuidesLibrary guides={guidesData} onTakeAction={handleTakeAction} />}
                                {activeTab === 'tools' && <Tools />}
                            </main>
                            <footer className="text-center mt-8 text-gray-500 text-sm">
                                <p>
                                    A tool by <a href="https://www.blaizeit.com/" target="_blank" rel="noopener noreferrer" className="font-semibold text-orange-400 hover:underline">BLAiZE IT🔥</a>
                                </p>
                            </footer>
                        </div>
                    </div>
                </>
            );
        }

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);
    </script>
</body>
</html>
