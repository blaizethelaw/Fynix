<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phoenix Plan Ultimate - Rise From Financial Ashes</title>
    
    <!-- Libraries -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    
    <!-- React -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
        :root {
            --phoenix-orange: #f97316;
            --phoenix-red: #ea580c;
            --phoenix-yellow: #f59e0b;
            --phoenix-gold: #fbbf24;
            --phoenix-dark: #0a0e27;
            --glass-white: rgba(255, 255, 255, 0.05);
            --glass-border: rgba(255, 255, 255, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0e27 0%, #111827 100%);
            color: white;
            min-height: 100vh;
        }
        
        #bgCanvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: 0;
            opacity: 0.3;
        }
        
        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1f2937;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #4b5563;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }
        
        /* Animations */
        @keyframes phoenixRise {
            0%, 100% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-10px) scale(1.05); }
        }
        
        @keyframes glow {
            0%, 100% { filter: brightness(1); }
            50% { filter: brightness(1.3); }
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .phoenix-glow {
            animation: glow 3s ease-in-out infinite;
        }
        
        .phoenix-rise {
            animation: phoenixRise 3s ease-in-out infinite;
        }
        
        .slide-in {
            animation: slideIn 0.5s ease;
        }
        
        /* Glass effect */
        .glass {
            background: var(--glass-white);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
        }
        
        /* Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-content {
            background: linear-gradient(135deg, #1f2937, #111827);
            padding: 2rem;
            border-radius: 1rem;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            border: 1px solid var(--glass-border);
        }
        
        /* Tabs */
        .tab-active {
            background: linear-gradient(135deg, var(--phoenix-orange), var(--phoenix-red));
            color: white;
        }
        
        /* Progress bars */
        .progress-bar {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-fill {
            background: linear-gradient(90deg, var(--phoenix-orange), var(--phoenix-yellow));
            height: 100%;
            transition: width 0.5s ease;
        }
        
        /* Tooltips */
        .tooltip {
            position: relative;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            width: 200px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* Budget health colors */
        .health-good { background: linear-gradient(135deg, #10b981, #059669); }
        .health-warning { background: linear-gradient(135deg, #f59e0b, #d97706); }
        .health-danger { background: linear-gradient(135deg, #ef4444, #dc2626); }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        // ==================== ICONS ====================
        const Icons = {
            Phoenix: () => (
                <svg className="w-12 h-12 phoenix-rise" viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="phoenixGrad" x1="0" y1="0" x2="1" y2="1">
                            <stop offset="0%" stopColor="#ff8a00" />
                            <stop offset="50%" stopColor="#ff3d00" />
                            <stop offset="100%" stopColor="#ff006e" />
                        </linearGradient>
                        <filter id="glow">
                            <feGaussianBlur stdDeviation="2.5" result="b" />
                            <feMerge>
                                <feMergeNode in="b" />
                                <feMergeNode in="SourceGraphic" />
                            </feMerge>
                        </filter>
                    </defs>
                    <g fill="url(#phoenixGrad)" filter="url(#glow)">
                        <path d="M60 14c9 9 11 20 5 33 5-6 10-9 17-13 8-4 15-8 20-16 1 10-3 19-11 27 8-2 14-7 18-15-1 12-7 22-18 30-5 4-10 7-15 9 4 6 6 12 5 19-4-8-10-13-20-18-10 5-16 10-20 18-1-7 1-13 5-19-5-2-10-5-15-9-11-8-17-18-18-30 4 8 10 13 18 15-8-8-12-17-11-27 5 8 12 12 20 16 7 4 12 7 17 13-6-13-4-24 5-33z" />
                        <path d="M60 78c-7 10-7 18-1 28 7-10 7-18 1-28z" />
                    </g>
                </svg>
            ),
            Dollar: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M12 1v22M17 5a4 4 0 0 0-4-2H9a3 3 0 0 0 0 6h6a3 3 0 0 1 0 6H7" /></svg>,
            Calculator: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><rect width="16" height="20" x="4" y="2" rx="2"/><line x1="8" x2="16" y1="6" y2="6"/><line x1="8" x2="8" y1="10" y2="14"/></svg>,
            Book: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M3 4h13a5 5 0 0 1 5 5v11H6a3 3 0 0 0-3 3z"/></svg>,
            Chart: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M3 17l6-6 4 4 7-7"/></svg>,
            Target: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>,
            Plus: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M12 5v14M5 12h14"/></svg>,
            Trash: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M10 11v6M14 11v6"/></svg>,
            Check: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M20 6L9 17l-5-5"/></svg>,
            Sparkles: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M12 2l2 4 4 2-4 2-2 4-2-4-4-2 4-2zM5 11l1 2 2 1-2 1-1 2-1-2-2-1 2-1z"/></svg>,
            Download: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5 5-5M12 15V3"/></svg>,
            Upload: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12"/></svg>,
            Calendar: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><rect x="3" y="4" width="18" height="18" rx="2"/><path d="M3 8h18M8 2v4M16 2v4"/></svg>,
            Lightbulb: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"/><path d="M9 18h6M10 22h4"/></svg>,
            Brain: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z"/></svg>,
            Flame: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"/></svg>,
            Wallet: () => <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M21 12V7H5a2 2 0 0 1 0-4h14v4"/><path d="M3 5v14a2 2 0 0 0 2 2h16v-5"/><path d="M18 12a2 2 0 1 0 4 0 2 2 0 1 0-4 0"/></svg>,
        };
        
        // ==================== UTILITIES ====================
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        };
        
        const uid = () => Math.random().toString(36).slice(2, 11);
        
        const daysInMonth = (date = new Date()) => {
            return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        };
        
        const daysUntilDue = (dueDay, today = new Date()) => {
            const currentDay = today.getDate();
            const totalDays = daysInMonth(today);
            
            if (dueDay >= currentDay) {
                return dueDay - currentDay;
            } else {
                return (totalDays - currentDay) + dueDay;
            }
        };
        
        // ==================== BACKGROUND ANIMATION ====================
        const BackgroundCanvas = () => {
            React.useEffect(() => {
                const sketch = (p) => {
                    let particles = [];
                    
                    p.setup = () => {
                        let canvas = p.createCanvas(p.windowWidth, p.windowHeight);
                        canvas.position(0, 0);
                        canvas.style('position', 'fixed');
                        canvas.style('z-index', '0');
                        canvas.id('bgCanvas');
                        
                        for (let i = 0; i < 30; i++) {
                            particles.push({
                                x: p.random(p.width),
                                y: p.random(p.height),
                                size: p.random(2, 5),
                                speedX: p.random(-0.5, 0.5),
                                speedY: p.random(-0.5, -1.5),
                                opacity: p.random(50, 150)
                            });
                        }
                    };
                    
                    p.draw = () => {
                        p.clear();
                        
                        particles.forEach((particle, i) => {
                            p.noStroke();
                            p.fill(249, 115, 22, particle.opacity);
                            p.ellipse(particle.x, particle.y, particle.size);
                            
                            // Update position
                            particle.x += particle.speedX;
                            particle.y += particle.speedY;
                            particle.opacity -= 0.5;
                            
                            // Reset particle if it goes off screen
                            if (particle.y < -10 || particle.opacity <= 0) {
                                particle.x = p.random(p.width);
                                particle.y = p.height + 10;
                                particle.opacity = p.random(50, 150);
                            }
                            
                            if (particle.x < 0) particle.x = p.width;
                            if (particle.x > p.width) particle.x = 0;
                        });
                        
                        // Draw connections between nearby particles
                        for (let i = 0; i < particles.length; i++) {
                            for (let j = i + 1; j < particles.length; j++) {
                                let d = p.dist(particles[i].x, particles[i].y, particles[j].x, particles[j].y);
                                if (d < 100) {
                                    p.stroke(249, 115, 22, 20 * (1 - d/100));
                                    p.line(particles[i].x, particles[i].y, particles[j].x, particles[j].y);
                                }
                            }
                        }
                    };
                    
                    p.windowResized = () => {
                        p.resizeCanvas(p.windowWidth, p.windowHeight);
                    };
                };
                
                new p5(sketch);
            }, []);
            
            return null;
        };
        
        // ==================== SETUP WIZARD ====================
        const SetupWizard = ({ onComplete }) => {
            const [step, setStep] = React.useState(1);
            const [data, setData] = React.useState({
                name: '',
                income: 0,
                incomeType: 'salary',
                goal: 'emergency'
            });
            
            const handleSubmit = (e) => {
                e.preventDefault();
                if (step < 3) {
                    setStep(step + 1);
                } else {
                    onComplete({
                        ...data,
                        expenses: [],
                        savingsGoals: [],
                        transactions: [],
                        settings: {
                            cycleMode: 'actual',
                            allocationMode: 'even',
                            roundTo: 'cent'
                        }
                    });
                }
            };
            
            return (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <div className="text-center mb-6">
                            <Icons.Phoenix />
                            <h2 className="text-3xl font-bold bg-gradient-to-r from-orange-400 to-yellow-500 bg-clip-text text-transparent mt-4">
                                Welcome to Phoenix Plan
                            </h2>
                            <p className="text-gray-400 mt-2">Rise from financial ashes to freedom</p>
                        </div>
                        
                        <div className="flex justify-between mb-6">
                            {[1, 2, 3].map(i => (
                                <div key={i} className={`flex-1 h-2 mx-1 rounded-full ${i <= step ? 'bg-orange-500' : 'bg-gray-700'}`} />
                            ))}
                        </div>
                        
                        <form onSubmit={handleSubmit}>
                            {step === 1 && (
                                <div className="space-y-4">
                                    <h3 className="text-xl font-semibold mb-4">Let's get to know you</h3>
                                    <div>
                                        <label className="block text-sm text-gray-400 mb-2">Your Name</label>
                                        <input
                                            type="text"
                                            value={data.name}
                                            onChange={(e) => setData({...data, name: e.target.value})}
                                            className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-orange-500 focus:outline-none"
                                            placeholder="Enter your name"
                                            required
                                        />
                                    </div>
                                </div>
                            )}
                            
                            {step === 2 && (
                                <div className="space-y-4">
                                    <h3 className="text-xl font-semibold mb-4">Your Income Details</h3>
                                    <div>
                                        <label className="block text-sm text-gray-400 mb-2">Monthly Income (After Tax & Garnishment)</label>
                                        <input
                                            type="number"
                                            value={data.income}
                                            onChange={(e) => setData({...data, income: parseFloat(e.target.value) || 0})}
                                            className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-orange-500 focus:outline-none"
                                            placeholder="What actually hits your bank"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm text-gray-400 mb-2">Income Type</label>
                                        <select
                                            value={data.incomeType}
                                            onChange={(e) => setData({...data, incomeType: e.target.value})}
                                            className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:border-orange-500 focus:outline-none"
                                        >
                                            <option value="salary">Salaried (Fixed)</option>
                                            <option value="hourly">Hourly (Variable)</option>
                                            <option value="contract">Contract/Freelance</option>
                                            <option value="multiple">Multiple Sources</option>
                                        </select>
                                    </div>
                                </div>
                            )}
                            
                            {step === 3 && (
                                <div className="space-y-4">
                                    <h3 className="text-xl font-semibold mb-4">Your Primary Goal</h3>
                                    <div className="space-y-3">
                                        {[
                                            { value: 'emergency', label: '🛡️ Build Emergency Fund', desc: 'Create a $1,000 safety net' },
                                            { value: 'debt', label: '💳 Eliminate Debt', desc: 'Pay off high-interest debt' },
                                            { value: 'credit', label: '📈 Rebuild Credit', desc: 'Reach 700+ credit score' },
                                            { value: 'save', label: '💰 Save for Purchase', desc: 'Save for a specific goal' },
                                            { value: 'invest', label: '🚀 Start Investing', desc: 'Build long-term wealth' }
                                        ].map(option => (
                                            <label key={option.value} className="block">
                                                <input
                                                    type="radio"
                                                    name="goal"
                                                    value={option.value}
                                                    checked={data.goal === option.value}
                                                    onChange={(e) => setData({...data, goal: e.target.value})}
                                                    className="sr-only"
                                                />
                                                <div className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                                                    data.goal === option.value 
                                                        ? 'border-orange-500 bg-orange-500/10' 
                                                        : 'border-gray-700 hover:border-gray-600'
                                                }`}>
                                                    <div className="font-semibold">{option.label}</div>
                                                    <div className="text-sm text-gray-400">{option.desc}</div>
                                                </div>
                                            </label>
                                        ))}
                                    </div>
                                </div>
                            )}
                            
                            <button
                                type="submit"
                                className="w-full mt-6 px-6 py-3 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg font-semibold hover:from-orange-600 hover:to-red-600 transition-all"
                            >
                                {step < 3 ? 'Continue' : 'Start My Phoenix Journey 🔥'}
                            </button>
                        </form>
                    </div>
                </div>
            );
        };
        
        // ==================== DASHBOARD COMPONENTS ====================
        const BudgetHealth = ({ income, expenses, savings }) => {
            const totalExpenses = expenses.reduce((sum, e) => sum + e.amount, 0);
            const totalSavings = savings.reduce((sum, g) => sum + (g.saved || 0), 0);
            const available = income - totalExpenses;
            const ratio = income > 0 ? (totalExpenses / income) * 100 : 0;
            
            let status, statusClass, message;
            if (ratio > 100) {
                status = '⚠️ Over Budget';
                statusClass = 'health-danger';
                message = `Spending ${formatCurrency(Math.abs(available))} more than income`;
            } else if (ratio > 90) {
                status = '😰 Tight Budget';
                statusClass = 'health-warning';
                message = 'Consider reducing expenses for savings';
            } else {
                status = '✅ Healthy Budget';
                statusClass = 'health-good';
                message = `${formatCurrency(available)} available for savings`;
            }
            
            return (
                <div className="glass rounded-xl p-6 mb-6">
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold">Budget Health</h3>
                        <div className={`px-3 py-1 rounded-full text-sm font-semibold ${statusClass}`}>
                            {status}
                        </div>
                    </div>
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center">
                            <div className="text-2xl font-bold text-green-400">{formatCurrency(income)}</div>
                            <div className="text-xs text-gray-400">Monthly Income</div>
                        </div>
                        <div className="text-center">
                            <div className="text-2xl font-bold text-red-400">{formatCurrency(totalExpenses)}</div>
                            <div className="text-xs text-gray-400">Total Expenses</div>
                        </div>
                        <div className="text-center">
                            <div className="text-2xl font-bold text-blue-400">{formatCurrency(totalSavings)}</div>
                            <div className="text-xs text-gray-400">Total Saved</div>
                        </div>
                        <div className="text-center">
                            <div className="text-2xl font-bold text-yellow-400">{ratio.toFixed(0)}%</div>
                            <div className="text-xs text-gray-400">Expense Ratio</div>
                        </div>
                    </div>
                    
                    <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                        <p className="text-sm text-gray-300">{message}</p>
                    </div>
                </div>
            );
        };
        
        const DailyBreakdown = ({ expenses, income, settings }) => {
            const cycleDays = settings?.cycleMode === 'actual' ? daysInMonth() : 30;
            const dailyIncome = income / cycleDays;
            
            const dailyExpenses = expenses.map(exp => ({
                ...exp,
                daily: exp.amount / cycleDays,
                weekly: (exp.amount / cycleDays) * 7,
                biweekly: (exp.amount / cycleDays) * 14,
                untilDue: exp.dueDay ? exp.amount / daysUntilDue(exp.dueDay) : exp.amount / cycleDays
            }));
            
            const totalDaily = dailyExpenses.reduce((sum, e) => sum + e.daily, 0);
            const dailyBuffer = dailyIncome - totalDaily;
            
            return (
                <div className="glass rounded-xl p-6">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <Icons.Sparkles />
                        Daily Chip-Away Plan
                    </h3>
                    
                    <div className="grid grid-cols-2 gap-4 mb-6">
                        <div className="bg-gray-800/50 rounded-lg p-4">
                            <div className="text-sm text-gray-400">Daily Income</div>
                            <div className="text-2xl font-bold text-green-400">{formatCurrency(dailyIncome)}</div>
                        </div>
                        <div className="bg-gray-800/50 rounded-lg p-4">
                            <div className="text-sm text-gray-400">Daily Expenses</div>
                            <div className="text-2xl font-bold text-red-400">{formatCurrency(totalDaily)}</div>
                        </div>
                    </div>
                    
                    <div className={`p-4 rounded-lg mb-4 ${dailyBuffer >= 0 ? 'bg-green-500/10 border border-green-500/30' : 'bg-red-500/10 border border-red-500/30'}`}>
                        <div className="text-sm text-gray-400">Daily Buffer</div>
                        <div className={`text-2xl font-bold ${dailyBuffer >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {formatCurrency(dailyBuffer)}
                        </div>
                    </div>
                    
                    <div className="space-y-3">
                        <h4 className="font-semibold text-sm text-gray-400">Today's Transfers</h4>
                        {dailyExpenses.map(exp => (
                            <div key={exp.id} className="bg-gray-800/50 rounded-lg p-3 flex justify-between items-center">
                                <div>
                                    <div className="font-semibold">{exp.name}</div>
                                    <div className="text-xs text-gray-400">{exp.category}</div>
                                </div>
                                <div className="text-right">
                                    <div className="font-bold text-orange-400">{formatCurrency(exp.daily)}</div>
                                    <div className="text-xs text-gray-400">per day</div>
                                </div>
                            </div>
                        ))}
                    </div>
                    
                    <div className="mt-4 p-3 bg-orange-500/10 border border-orange-500/30 rounded-lg">
                        <p className="text-sm text-orange-300">
                            💡 <strong>Pro Tip:</strong> Set up a "Bills" savings account and schedule a daily transfer of {formatCurrency(totalDaily)}
                        </p>
                    </div>
                </div>
            );
        };
        
        const ExpenseManager = ({ expenses, onAdd, onRemove, onUpdate }) => {
            const [showForm, setShowForm] = React.useState(false);
            const [newExpense, setNewExpense] = React.useState({
                name: '',
                amount: '',
                category: 'Other',
                dueDay: '1',
                priority: 'medium'
            });
            
            const categories = ['Housing', 'Utilities', 'Transport', 'Food', 'Debt', 'Insurance', 'Subscriptions', 'Other'];
            const priorities = [
                { value: 'essential', label: 'Essential (Four Walls)', color: 'text-red-400' },
                { value: 'high', label: 'High Priority', color: 'text-orange-400' },
                { value: 'medium', label: 'Medium Priority', color: 'text-yellow-400' },
                { value: 'low', label: 'Low Priority', color: 'text-green-400' }
            ];
            
            const handleSubmit = (e) => {
                e.preventDefault();
                onAdd({
                    id: uid(),
                    ...newExpense,
                    amount: parseFloat(newExpense.amount),
                    dueDay: parseInt(newExpense.dueDay)
                });
                setNewExpense({ name: '', amount: '', category: 'Other', dueDay: '1', priority: 'medium' });
                setShowForm(false);
            };
            
            const groupedExpenses = priorities.map(priority => ({
                ...priority,
                expenses: expenses.filter(e => e.priority === priority.value)
            }));
            
            return (
                <div className="glass rounded-xl p-6">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <Icons.Dollar />
                            Monthly Expenses
                        </h3>
                        <button
                            onClick={() => setShowForm(!showForm)}
                            className="px-4 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg flex items-center gap-2 transition-colors"
                        >
                            <Icons.Plus />
                            Add Expense
                        </button>
                    </div>
                    
                    {showForm && (
                        <form onSubmit={handleSubmit} className="mb-6 p-4 bg-gray-800/50 rounded-lg space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <input
                                    type="text"
                                    placeholder="Expense name"
                                    value={newExpense.name}
                                    onChange={(e) => setNewExpense({...newExpense, name: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                                    required
                                />
                                <input
                                    type="number"
                                    placeholder="Amount"
                                    value={newExpense.amount}
                                    onChange={(e) => setNewExpense({...newExpense, amount: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                                    step="0.01"
                                    required
                                />
                                <select
                                    value={newExpense.category}
                                    onChange={(e) => setNewExpense({...newExpense, category: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                                >
                                    {categories.map(cat => (
                                        <option key={cat} value={cat}>{cat}</option>
                                    ))}
                                </select>
                                <select
                                    value={newExpense.priority}
                                    onChange={(e) => setNewExpense({...newExpense, priority: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                                >
                                    {priorities.map(p => (
                                        <option key={p.value} value={p.value}>{p.label}</option>
                                    ))}
                                </select>
                                <input
                                    type="number"
                                    placeholder="Due day (1-31)"
                                    value={newExpense.dueDay}
                                    onChange={(e) => setNewExpense({...newExpense, dueDay: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                                    min="1"
                                    max="31"
                                />
                                <button
                                    type="submit"
                                    className="px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
                                >
                                    Add Expense
                                </button>
                            </div>
                        </form>
                    )}
                    
                    <div className="space-y-4">
                        {groupedExpenses.map(group => (
                            group.expenses.length > 0 && (
                                <div key={group.value}>
                                    <h4 className={`font-semibold mb-2 ${group.color}`}>{group.label}</h4>
                                    <div className="space-y-2">
                                        {group.expenses.map(expense => (
                                            <div key={expense.id} className="bg-gray-800/50 rounded-lg p-3 flex justify-between items-center group hover:bg-gray-800/70 transition-colors">
                                                <div className="flex-1">
                                                    <div className="font-semibold">{expense.name}</div>
                                                    <div className="text-sm text-gray-400">
                                                        {expense.category} • Due: Day {expense.dueDay}
                                                    </div>
                                                </div>
                                                <div className="flex items-center gap-3">
                                                    <div className="text-right">
                                                        <div className="font-bold text-xl">{formatCurrency(expense.amount)}</div>
                                                        <div className="text-xs text-gray-400">{formatCurrency(expense.amount / 30)}/day</div>
                                                    </div>
                                                    <button
                                                        onClick={() => onRemove(expense.id)}
                                                        className="opacity-0 group-hover:opacity-100 p-2 text-red-400 hover:text-red-300 transition-all"
                                                    >
                                                        <Icons.Trash />
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )
                        ))}
                    </div>
                    
                    {expenses.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                            <Icons.Wallet />
                            <p className="mt-2">No expenses added yet</p>
                            <p className="text-sm">Click "Add Expense" to get started</p>
                        </div>
                    )}
                </div>
            );
        };
        
        const SavingsGoals = ({ goals, onAdd, onUpdate, onRemove }) => {
            const [showForm, setShowForm] = React.useState(false);
            const [newGoal, setNewGoal] = React.useState({ name: '', target: '', priority: 'medium' });
            
            const handleSubmit = (e) => {
                e.preventDefault();
                onAdd({
                    id: uid(),
                    ...newGoal,
                    target: parseFloat(newGoal.target),
                    saved: 0,
                    createdAt: new Date().toISOString()
                });
                setNewGoal({ name: '', target: '', priority: 'medium' });
                setShowForm(false);
            };
            
            return (
                <div className="glass rounded-xl p-6">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <Icons.Target />
                            Savings Goals
                        </h3>
                        <button
                            onClick={() => setShowForm(!showForm)}
                            className="px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg flex items-center gap-2 transition-colors"
                        >
                            <Icons.Plus />
                            Add Goal
                        </button>
                    </div>
                    
                    {showForm && (
                        <form onSubmit={handleSubmit} className="mb-6 p-4 bg-gray-800/50 rounded-lg space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <input
                                    type="text"
                                    placeholder="Goal name"
                                    value={newGoal.name}
                                    onChange={(e) => setNewGoal({...newGoal, name: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                                    required
                                />
                                <input
                                    type="number"
                                    placeholder="Target amount"
                                    value={newGoal.target}
                                    onChange={(e) => setNewGoal({...newGoal, target: e.target.value})}
                                    className="px-4 py-2 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                                    step="0.01"
                                    required
                                />
                                <button
                                    type="submit"
                                    className="px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
                                >
                                    Create Goal
                                </button>
                            </div>
                        </form>
                    )}
                    
                    <div className="space-y-4">
                        {goals.map(goal => {
                            const progress = goal.target > 0 ? (goal.saved / goal.target) * 100 : 0;
                            
                            return (
                                <div key={goal.id} className="bg-gray-800/50 rounded-lg p-4">
                                    <div className="flex justify-between items-start mb-3">
                                        <div>
                                            <h4 className="font-semibold text-lg">{goal.name}</h4>
                                            <p className="text-sm text-gray-400">
                                                {formatCurrency(goal.saved)} / {formatCurrency(goal.target)}
                                            </p>
                                        </div>
                                        <div className="text-2xl font-bold text-green-400">
                                            {progress.toFixed(0)}%
                                        </div>
                                    </div>
                                    
                                    <div className="progress-bar h-3 mb-3">
                                        <div className="progress-fill" style={{ width: `${Math.min(progress, 100)}%` }} />
                                    </div>
                                    
                                    <div className="flex gap-2">
                                        <button
                                            onClick={() => {
                                                const amount = parseFloat(prompt('Add to savings:') || 0);
                                                if (amount > 0) {
                                                    onUpdate(goal.id, { saved: goal.saved + amount });
                                                }
                                            }}
                                            className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-400 rounded text-sm transition-colors"
                                        >
                                            Add Funds
                                        </button>
                                        <button
                                            onClick={() => onRemove(goal.id)}
                                            className="px-3 py-1 bg-red-500/20 hover:bg-red-500/30 text-red-400 rounded text-sm transition-colors"
                                        >
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                    
                    {goals.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                            <Icons.Target />
                            <p className="mt-2">No savings goals yet</p>
                            <p className="text-sm">Start with a $1,000 emergency fund!</p>
                        </div>
                    )}
                </div>
            );
        };
        
        // ==================== CALCULATORS ====================
        const Calculators = () => {
            const [dailyCost, setDailyCost] = React.useState(null);
            const [debtResult, setDebtResult] = React.useState(null);
            const [compoundResult, setCompoundResult] = React.useState(null);
            
            const calculateDaily = (e) => {
                const monthly = parseFloat(e.target.value);
                if (!monthly || monthly <= 0) {
                    setDailyCost(null);
                    return;
                }
                setDailyCost({
                    daily: monthly / 30,
                    weekly: monthly / 4.33,
                    hourly: monthly / 30 / 24,
                    yearly: monthly * 12
                });
            };
            
            const calculateDebt = (e) => {
                e.preventDefault();
                const amount = parseFloat(e.target.elements.amount.value);
                const rate = parseFloat(e.target.elements.rate.value) / 100 / 12;
                const payment = parseFloat(e.target.elements.payment.value);
                
                if (!amount || !rate || !payment || payment <= amount * rate) {
                    setDebtResult(null);
                    return;
                }
                
                const months = Math.ceil(Math.log(payment / (payment - amount * rate)) / Math.log(1 + rate));
                const totalPaid = payment * months;
                const totalInterest = totalPaid - amount;
                
                setDebtResult({ months, totalInterest, totalPaid });
            };
            
            const calculateCompound = (e) => {
                e.preventDefault();
                const initial = parseFloat(e.target.elements.initial.value) || 0;
                const monthly = parseFloat(e.target.elements.monthly.value) || 0;
                const rate = parseFloat(e.target.elements.rate.value) / 100;
                const years = parseFloat(e.target.elements.years.value);
                
                if (!years) {
                    setCompoundResult(null);
                    return;
                }
                
                const months = years * 12;
                const monthlyRate = rate / 12;
                let futureValue = initial * Math.pow(1 + monthlyRate, months);
                
                if (monthly > 0) {
                    futureValue += monthly * ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);
                }
                
                const totalContributed = initial + (monthly * months);
                const earnings = futureValue - totalContributed;
                
                setCompoundResult({ futureValue, totalContributed, earnings });
            };
            
            return (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="glass rounded-xl p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                            <Icons.Calculator />
                            Daily Cost Calculator
                        </h3>
                        <p className="text-sm text-gray-400 mb-4">
                            Break down any monthly expense into daily amounts
                        </p>
                        <input
                            type="number"
                            placeholder="Enter monthly amount"
                            onChange={calculateDaily}
                            className="w-full px-4 py-2 bg-gray-800 rounded-lg mb-4"
                        />
                        {dailyCost && (
                            <div className="space-y-2">
                                <div className="bg-gray-800/50 rounded-lg p-3">
                                    <div className="text-sm text-gray-400">Daily</div>
                                    <div className="text-2xl font-bold text-orange-400">{formatCurrency(dailyCost.daily)}</div>
                                </div>
                                <div className="grid grid-cols-2 gap-2">
                                    <div className="bg-gray-800/50 rounded-lg p-2">
                                        <div className="text-xs text-gray-400">Weekly</div>
                                        <div className="font-bold">{formatCurrency(dailyCost.weekly)}</div>
                                    </div>
                                    <div className="bg-gray-800/50 rounded-lg p-2">
                                        <div className="text-xs text-gray-400">Yearly</div>
                                        <div className="font-bold">{formatCurrency(dailyCost.yearly)}</div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                    
                    <div className="glass rounded-xl p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                            <Icons.Target />
                            Debt Payoff Calculator
                        </h3>
                        <form onSubmit={calculateDebt} className="space-y-3">
                            <input
                                name="amount"
                                type="number"
                                placeholder="Total debt"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                                required
                            />
                            <input
                                name="rate"
                                type="number"
                                placeholder="Interest rate (%)"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                                step="0.1"
                                required
                            />
                            <input
                                name="payment"
                                type="number"
                                placeholder="Monthly payment"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                                required
                            />
                            <button type="submit" className="w-full px-4 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg transition-colors">
                                Calculate
                            </button>
                        </form>
                        {debtResult && (
                            <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-green-400">{debtResult.months} months</div>
                                    <div className="text-sm text-gray-400">to debt freedom</div>
                                    <div className="text-sm mt-2">Total interest: {formatCurrency(debtResult.totalInterest)}</div>
                                </div>
                            </div>
                        )}
                    </div>
                    
                    <div className="glass rounded-xl p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                            <Icons.Chart />
                            Compound Interest
                        </h3>
                        <form onSubmit={calculateCompound} className="space-y-3">
                            <input
                                name="initial"
                                type="number"
                                placeholder="Initial amount"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                            />
                            <input
                                name="monthly"
                                type="number"
                                placeholder="Monthly contribution"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                            />
                            <input
                                name="rate"
                                type="number"
                                placeholder="Annual return (%)"
                                defaultValue="8"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                                step="0.1"
                            />
                            <input
                                name="years"
                                type="number"
                                placeholder="Years"
                                defaultValue="10"
                                className="w-full px-4 py-2 bg-gray-800 rounded-lg"
                            />
                            <button type="submit" className="w-full px-4 py-2 bg-green-500 hover:bg-green-600 rounded-lg transition-colors">
                                Calculate
                            </button>
                        </form>
                        {compoundResult && (
                            <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-green-400">{formatCurrency(compoundResult.futureValue)}</div>
                                    <div className="text-sm text-gray-400">future value</div>
                                    <div className="text-sm mt-2">Earnings: {formatCurrency(compoundResult.earnings)}</div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            );
        };
        
        // ==================== GUIDES LIBRARY ====================
        const GuidesLibrary = () => {
            const [activeGuide, setActiveGuide] = React.useState(null);
            
            const guides = [
                {
                    id: 'emergency',
                    title: '🛡️ Emergency Fund',
                    description: 'Build your $1,000 starter emergency fund',
                    content: `
                        <h3>Why $1,000?</h3>
                        <p>This amount covers most common emergencies without derailing your entire financial plan.</p>
                        
                        <h3>How to Build It Fast:</h3>
                        <ul>
                            <li>Sell everything you don't need</li>
                            <li>Take on extra shifts or gigs</li>
                            <li>Cancel all non-essential subscriptions</li>
                            <li>Use tax refunds and bonuses</li>
                        </ul>
                        
                        <h3>The Math:</h3>
                        <p>$25/week = $1,000 in 40 weeks</p>
                        <p>$50/week = $1,000 in 20 weeks</p>
                        <p>$100/week = $1,000 in 10 weeks</p>
                    `
                },
                {
                    id: 'snowball',
                    title: '❄️ Debt Snowball',
                    description: 'Pay off debts from smallest to largest',
                    content: `
                        <h3>The Strategy:</h3>
                        <p>List debts from smallest to largest balance, regardless of interest rate.</p>
                        
                        <h3>Steps:</h3>
                        <ol>
                            <li>Make minimum payments on all debts</li>
                            <li>Attack the smallest debt with everything extra</li>
                            <li>Once paid, roll that payment to the next debt</li>
                            <li>Repeat until debt-free</li>
                        </ol>
                        
                        <h3>Why It Works:</h3>
                        <p>Quick wins build momentum and motivation to continue.</p>
                    `
                },
                {
                    id: 'avalanche',
                    title: '🏔️ Debt Avalanche',
                    description: 'Pay off highest interest rate debts first',
                    content: `
                        <h3>The Strategy:</h3>
                        <p>List debts from highest to lowest interest rate.</p>
                        
                        <h3>Steps:</h3>
                        <ol>
                            <li>Make minimum payments on all debts</li>
                            <li>Attack the highest APR debt with everything extra</li>
                            <li>Once paid, move to the next highest rate</li>
                            <li>Continue until debt-free</li>
                        </ol>
                        
                        <h3>The Math:</h3>
                        <p>This method saves the most money on interest over time.</p>
                    `
                },
                {
                    id: 'credit',
                    title: '📈 Credit Repair',
                    description: 'Rebuild your credit to 700+',
                    content: `
                        <h3>12-Month Plan:</h3>
                        
                        <h4>Months 1-3: Foundation</h4>
                        <ul>
                            <li>Pull all 3 credit reports</li>
                            <li>Dispute ALL errors</li>
                            <li>Apply for credit-builder loan</li>
                            <li>Send goodwill letters</li>
                        </ul>
                        
                        <h4>Months 4-6: Building</h4>
                        <ul>
                            <li>Get secured credit card</li>
                            <li>Become authorized user</li>
                            <li>Set up autopay for everything</li>
                            <li>Keep utilization under 10%</li>
                        </ul>
                        
                        <h4>Months 7-12: Optimization</h4>
                        <ul>
                            <li>Request credit limit increases</li>
                            <li>Pay down to 1% before statement</li>
                            <li>NO new applications</li>
                            <li>Monitor scores weekly</li>
                        </ul>
                    `
                },
                {
                    id: 'investing',
                    title: '🚀 Start Investing',
                    description: 'Simple path to wealth building',
                    content: `
                        <h3>Priority Order:</h3>
                        <ol>
                            <li>401(k) match (free money!)</li>
                            <li>Roth IRA ($6,500/year)</li>
                            <li>Max 401(k) ($23,000/year)</li>
                            <li>Taxable account</li>
                        </ol>
                        
                        <h3>Simple Portfolio:</h3>
                        <p><strong>One fund approach:</strong> VTI (Total Stock Market) or VT (Total World Stock)</p>
                        
                        <h3>Roth IRA Secret:</h3>
                        <p>You can withdraw contributions (not earnings) anytime, tax-free and penalty-free!</p>
                    `
                }
            ];
            
            return (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="md:col-span-1">
                        <div className="glass rounded-xl p-4">
                            <h3 className="text-lg font-semibold mb-4">Guides</h3>
                            <div className="space-y-2">
                                {guides.map(guide => (
                                    <button
                                        key={guide.id}
                                        onClick={() => setActiveGuide(guide)}
                                        className={`w-full text-left p-3 rounded-lg transition-all ${
                                            activeGuide?.id === guide.id
                                                ? 'bg-orange-500/20 border-l-4 border-orange-500'
                                                : 'hover:bg-gray-800/50'
                                        }`}
                                    >
                                        <div className="font-semibold">{guide.title}</div>
                                        <div className="text-sm text-gray-400">{guide.description}</div>
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                    
                    <div className="md:col-span-2">
                        <div className="glass rounded-xl p-6 min-h-[500px]">
                            {activeGuide ? (
                                <div>
                                    <h2 className="text-2xl font-bold mb-4 bg-gradient-to-r from-orange-400 to-yellow-500 bg-clip-text text-transparent">
                                        {activeGuide.title}
                                    </h2>
                                    <div 
                                        className="prose prose-invert max-w-none"
                                        dangerouslySetInnerHTML={{ __html: activeGuide.content }}
                                    />
                                </div>
                            ) : (
                                <div className="flex flex-col items-center justify-center h-full text-gray-500">
                                    <Icons.Book />
                                    <p className="mt-4">Select a guide to learn more</p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        };
        
        // ==================== AI HEALTH ANALYSIS ====================
        const AIHealthAnalysis = ({ userData }) => {
            const [analysis, setAnalysis] = React.useState(null);
            const [loading, setLoading] = React.useState(false);
            
            const getAnalysis = async () => {
                setLoading(true);
                // Simulate AI analysis (replace with actual API call if needed)
                setTimeout(() => {
                    const totalExpenses = userData.expenses.reduce((sum, e) => sum + e.amount, 0);
                    const ratio = userData.income > 0 ? (totalExpenses / userData.income) * 100 : 0;
                    const savingsRate = Math.max(0, ((userData.income - totalExpenses) / userData.income) * 100);
                    
                    let score = 100;
                    if (ratio > 100) score = 20;
                    else if (ratio > 90) score = 40;
                    else if (ratio > 80) score = 60;
                    else if (ratio > 70) score = 75;
                    else score = Math.min(100, 75 + savingsRate);
                    
                    setAnalysis({
                        score: Math.round(score),
                        breakdown: {
                            budgeting: ratio < 80 ? 'Excellent' : ratio < 90 ? 'Good' : 'Needs Work',
                            savings: savingsRate > 20 ? 'Excellent' : savingsRate > 10 ? 'Good' : 'Needs Work',
                            planning: userData.savingsGoals.length > 0 ? 'Active' : 'Inactive'
                        },
                        tip: ratio > 90 
                            ? 'Consider reducing non-essential expenses to create breathing room'
                            : savingsRate < 10
                            ? 'Try to increase your savings rate to at least 10%'
                            : 'Great job! Consider automating your savings'
                    });
                    setLoading(false);
                }, 1500);
            };
            
            return (
                <div className="glass rounded-xl p-6">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <Icons.Brain />
                        AI Financial Health
                    </h3>
                    
                    {analysis ? (
                        <div className="space-y-4">
                            <div className="text-center">
                                <div className="text-6xl font-bold bg-gradient-to-r from-orange-400 to-yellow-500 bg-clip-text text-transparent">
                                    {analysis.score}
                                </div>
                                <div className="text-sm text-gray-400">Financial Health Score</div>
                            </div>
                            
                            <div className="space-y-2">
                                <div className="flex justify-between p-2 bg-gray-800/50 rounded">
                                    <span className="text-gray-400">Budgeting</span>
                                    <span className={analysis.breakdown.budgeting === 'Excellent' ? 'text-green-400' : analysis.breakdown.budgeting === 'Good' ? 'text-yellow-400' : 'text-red-400'}>
                                        {analysis.breakdown.budgeting}
                                    </span>
                                </div>
                                <div className="flex justify-between p-2 bg-gray-800/50 rounded">
                                    <span className="text-gray-400">Savings</span>
                                    <span className={analysis.breakdown.savings === 'Excellent' ? 'text-green-400' : analysis.breakdown.savings === 'Good' ? 'text-yellow-400' : 'text-red-400'}>
                                        {analysis.breakdown.savings}
                                    </span>
                                </div>
                                <div className="flex justify-between p-2 bg-gray-800/50 rounded">
                                    <span className="text-gray-400">Planning</span>
                                    <span className={analysis.breakdown.planning === 'Active' ? 'text-green-400' : 'text-gray-400'}>
                                        {analysis.breakdown.planning}
                                    </span>
                                </div>
                            </div>
                            
                            <div className="p-3 bg-orange-500/10 border border-orange-500/30 rounded-lg">
                                <p className="text-sm">
                                    <strong>💡 AI Tip:</strong> {analysis.tip}
                                </p>
                            </div>
                            
                            <button
                                onClick={getAnalysis}
                                className="w-full px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                            >
                                Re-analyze
                            </button>
                        </div>
                    ) : (
                        <div className="text-center py-8">
                            <p className="text-gray-400 mb-4">Get AI-powered insights into your financial health</p>
                            <button
                                onClick={getAnalysis}
                                disabled={loading}
                                className="px-6 py-3 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg font-semibold hover:from-orange-600 hover:to-red-600 transition-all disabled:opacity-50"
                            >
                                {loading ? 'Analyzing...' : '✨ Analyze My Finances'}
                            </button>
                        </div>
                    )}
                </div>
            );
        };
        
        // ==================== JOURNEY MILESTONES ====================
        const Journey = ({ userData, onUpdate }) => {
            const milestones = [
                {
                    id: 'setup',
                    title: 'Set up income and budget',
                    complete: userData.income > 0
                },
                {
                    id: 'emergency',
                    title: 'Create emergency fund goal',
                    complete: userData.savingsGoals.some(g => g.name.toLowerCase().includes('emergency'))
                },
                {
                    id: 'expenses',
                    title: 'Track all monthly expenses',
                    complete: userData.expenses.length >= 5
                },
                {
                    id: 'savings',
                    title: 'Save first $100',
                    complete: userData.savingsGoals.reduce((sum, g) => sum + g.saved, 0) >= 100
                },
                {
                    id: 'buffer',
                    title: 'Achieve positive cash flow',
                    complete: userData.income > userData.expenses.reduce((sum, e) => sum + e.amount, 0)
                },
                {
                    id: 'goals',
                    title: 'Set 3 savings goals',
                    complete: userData.savingsGoals.length >= 3
                }
            ];
            
            const completedCount = milestones.filter(m => m.complete).length;
            const progress = (completedCount / milestones.length) * 100;
            
            return (
                <div className="glass rounded-xl p-6">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <Icons.Flame />
                        Your Phoenix Journey
                    </h3>
                    
                    <div className="mb-6">
                        <div className="flex justify-between text-sm mb-2">
                            <span>Progress</span>
                            <span>{completedCount} / {milestones.length} Complete</span>
                        </div>
                        <div className="progress-bar h-4">
                            <div className="progress-fill" style={{ width: `${progress}%` }} />
                        </div>
                    </div>
                    
                    <div className="space-y-3">
                        {milestones.map(milestone => (
                            <div
                                key={milestone.id}
                                className={`p-3 rounded-lg flex items-center gap-3 transition-all ${
                                    milestone.complete
                                        ? 'bg-green-500/10 border border-green-500/30'
                                        : 'bg-gray-800/50'
                                }`}
                            >
                                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                                    milestone.complete
                                        ? 'bg-green-500'
                                        : 'border-2 border-gray-600'
                                }`}>
                                    {milestone.complete && <Icons.Check />}
                                </div>
                                <span className={milestone.complete ? 'line-through text-gray-500' : ''}>
                                    {milestone.title}
                                </span>
                            </div>
                        ))}
                    </div>
                    
                    {progress === 100 && (
                        <div className="mt-6 p-4 bg-gradient-to-r from-orange-500/20 to-yellow-500/20 rounded-lg text-center">
                            <p className="text-lg font-semibold">🎉 Congratulations!</p>
                            <p className="text-sm text-gray-300 mt-1">You've completed the Phoenix Foundation!</p>
                        </div>
                    )}
                </div>
            );
        };
        
        // ==================== MAIN APP ====================
        const App = () => {
            const [userData, setUserData] = React.useState(null);
            const [activeTab, setActiveTab] = React.useState('dashboard');
            
            React.useEffect(() => {
                const saved = localStorage.getItem('phoenix-ultimate-data');
                if (saved) {
                    setUserData(JSON.parse(saved));
                }
            }, []);
            
            const handleSetupComplete = (data) => {
                setUserData(data);
                localStorage.setItem('phoenix-ultimate-data', JSON.stringify(data));
            };
            
            const updateUserData = (updates) => {
                const newData = { ...userData, ...updates };
                setUserData(newData);
                localStorage.setItem('phoenix-ultimate-data', JSON.stringify(newData));
            };
            
            const exportData = () => {
                const dataStr = JSON.stringify(userData, null, 2);
                const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
                const exportFileDefaultName = `phoenix-plan-${new Date().toISOString().slice(0, 10)}.json`;
                
                const linkElement = document.createElement('a');
                linkElement.setAttribute('href', dataUri);
                linkElement.setAttribute('download', exportFileDefaultName);
                linkElement.click();
            };
            
            const importData = (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        try {
                            const data = JSON.parse(event.target.result);
                            setUserData(data);
                            localStorage.setItem('phoenix-ultimate-data', JSON.stringify(data));
                            alert('Data imported successfully!');
                        } catch (error) {
                            alert('Invalid file format');
                        }
                    };
                    reader.readAsText(file);
                }
            };
            
            if (!userData) {
                return <SetupWizard onComplete={handleSetupComplete} />;
            }
            
            return (
                <>
                    <BackgroundCanvas />
                    
                    <div className="relative z-10 min-h-screen p-4 md:p-6 lg:p-8">
                        <div className="max-w-7xl mx-auto">
                            {/* Header */}
                            <header className="glass rounded-xl p-4 md:p-6 mb-6">
                                <div className="flex flex-col md:flex-row items-center justify-between gap-4">
                                    <div className="flex items-center gap-4">
                                        <Icons.Phoenix />
                                        <div>
                                            <h1 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-orange-400 to-yellow-500 bg-clip-text text-transparent">
                                                Phoenix Plan Ultimate
                                            </h1>
                                            <p className="text-gray-400">Welcome back, {userData.name}! 🔥</p>
                                        </div>
                                    </div>
                                    
                                    <div className="flex items-center gap-2">
                                        <button
                                            onClick={exportData}
                                            className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                                            title="Export data"
                                        >
                                            <Icons.Download />
                                        </button>
                                        <label className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors cursor-pointer" title="Import data">
                                            <Icons.Upload />
                                            <input type="file" accept=".json" onChange={importData} className="hidden" />
                                        </label>
                                    </div>
                                </div>
                                
                                {/* Navigation */}
                                <nav className="flex flex-wrap gap-2 mt-6">
                                    {[
                                        { id: 'dashboard', label: 'Dashboard', icon: Icons.Target },
                                        { id: 'expenses', label: 'Expenses', icon: Icons.Dollar },
                                        { id: 'calculators', label: 'Calculators', icon: Icons.Calculator },
                                        { id: 'guides', label: 'Guides', icon: Icons.Book },
                                        { id: 'journey', label: 'Journey', icon: Icons.Flame }
                                    ].map(tab => (
                                        <button
                                            key={tab.id}
                                            onClick={() => setActiveTab(tab.id)}
                                            className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-all ${
                                                activeTab === tab.id
                                                    ? 'bg-gradient-to-r from-orange-500 to-red-500'
                                                    : 'bg-gray-700 hover:bg-gray-600'
                                            }`}
                                        >
                                            <tab.icon />
                                            {tab.label}
                                        </button>
                                    ))}
                                </nav>
                            </header>
                            
                            {/* Content */}
                            <main>
                                {activeTab === 'dashboard' && (
                                    <div className="space-y-6">
                                        <BudgetHealth
                                            income={userData.income}
                                            expenses={userData.expenses || []}
                                            savings={userData.savingsGoals || []}
                                        />
                                        
                                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                            <DailyBreakdown
                                                expenses={userData.expenses || []}
                                                income={userData.income}
                                                settings={userData.settings || {}}
                                            />
                                            
                                            <div className="space-y-6">
                                                <SavingsGoals
                                                    goals={userData.savingsGoals || []}
                                                    onAdd={(goal) => updateUserData({
                                                        savingsGoals: [...(userData.savingsGoals || []), goal]
                                                    })}
                                                    onUpdate={(id, updates) => updateUserData({
                                                        savingsGoals: userData.savingsGoals.map(g => 
                                                            g.id === id ? { ...g, ...updates } : g
                                                        )
                                                    })}
                                                    onRemove={(id) => updateUserData({
                                                        savingsGoals: userData.savingsGoals.filter(g => g.id !== id)
                                                    })}
                                                />
                                                
                                                <AIHealthAnalysis userData={userData} />
                                            </div>
                                        </div>
                                    </div>
                                )}
                                
                                {activeTab === 'expenses' && (
                                    <ExpenseManager
                                        expenses={userData.expenses || []}
                                        onAdd={(expense) => updateUserData({
                                            expenses: [...(userData.expenses || []), expense]
                                        })}
                                        onRemove={(id) => updateUserData({
                                            expenses: userData.expenses.filter(e => e.id !== id)
                                        })}
                                        onUpdate={(id, updates) => updateUserData({
                                            expenses: userData.expenses.map(e => 
                                                e.id === id ? { ...e, ...updates } : e
                                            )
                                        })}
                                    />
                                )}
                                
                                {activeTab === 'calculators' && <Calculators />}
                                
                                {activeTab === 'guides' && <GuidesLibrary />}
                                
                                {activeTab === 'journey' && (
                                    <Journey userData={userData} onUpdate={updateUserData} />
                                )}
                            </main>
                            
                            {/* Footer */}
                            <footer className="text-center mt-12 text-gray-500 text-sm">
                                <p>Rise from financial ashes to freedom • Phoenix Plan Ultimate</p>
                            </footer>
                        </div>
                    </div>
                </>
            );
        };
        
        // Render the app
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>